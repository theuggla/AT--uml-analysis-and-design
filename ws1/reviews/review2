Naming is very clear and informative. Diagram is not overly complex and easy to read. Naming is consistent and correctly spelled.

The aggregate/composition arrow between event and calendar overcomplicates things and should probably be just a line. (see lecture: Ohlsson, T. (2016). Domain Modeling.)

Perhaps the .png format is slightly unfortunate when the diagram does not have a set background, as the image viewer used will just assign a background which might make it hard to read the association labels. This is not strictly diagram-related though, but I would consider using a file with a set background to display the diagram.


All the requirements are adequately considered and could be realised using this domain model. It would possibly be wise to add some missing attributes, for example a startDate and endDate on the event, and to split up "boat details" into more specific parts. I would also consider adding an association directly between member and berth, to indicate who is renting what berth - although this could be derived from the member owning a boat and the boat being registered to the berth, in the scenario of the municipality needing to know what member is renting what berth in the case of an accident, it is probably because the boat is gone (stolen? on fire?) and it would be inconvenient to go back and search through the records to identify the member. In that case the association between member and berth could be argued to be relevant enough to merit its own association-line.




The model is a well made domain model in the shape of a UML class diagram. It is most definitely made to understand the problem rather than to solve it. It is clear and easy to understand and follow, and captures all the major concepts (Member - Berth - Boat) needed to fulfill the requirements. It is not overly complicated. It gives a very god and clear impression.

It contains almost no attributes, which means it lacks some of the information needed to realise the requirements. I would advice to add what Larman calls "those attributes [...] needed to satisfy the information requirements" (Applying UML and Patterns 9.16:Attributes). In this case those "information requirements" would be the information needed to satisfy the requirements regarding to view and list calendar events, both which are mentioning a time-frame constraint on the event. Additionally it might be good to clarify which are the important parts of the information in the register boat-use case, for example by splitting out the a "size" attribute on the Boat from the more general "boat information". 

The membership fees are also not represented in this diagram. A solution to this could be to add them as a derived attribute on the member (derived from the "fixed membership fee" and the priced of the berth). It could be argued, based on Larman (Applying UML and Patterns 9.16: Attributes:Derived Attributes) that such a derived attribute is "noteworthy" here, since it is being explicitly referenced as being updated when a boat is registered.  On the other hand, the fee could also be modeled as a separate conceptual class, but since the only place they are represented when handling these particular use cases are when they are updated in the register boat-use case, they are most likely what Larman calls "attributes [where] the requirements imply a need to remember information" (Applying UML and Patterns 9.16: Attributes) - the fee would have to be remembered to be updated. In this case it could therefore simply be modeled as an attribute on the member, for example, and it would be overkill to make it into a class - in Applying UML and Patterns 9.6: Example: Find and Draw Conceptual Classes, Larman suggests that a model should at any given point be "[...] constrained to the requirements and simplifications currently under consideration". When the paying and handling payment requirements are being modeled it would possibly be advisable to model the fee as a class instead.

The association names are over all very clear and "enhance our understanding of the domain". (Larman, Applying UML and Patterns 9.14:Associations). 

The reservation of a berth is handled as an association between the secretary and the berths, as well as the berth and the boat. There is also no explicit modeling of the history of reservations, although the information to make such a history is present. There are of course many possible solutions to the second problem, one being to simply add a "berthHistory" association between the member and the berth (based on Larman's reasoning in Applying UML and Patterns 9.14:Associations, that an association should be added when "we need some memory of a relationship [between certain objects]").  It might also be that such an association would obscure the fact that the relation between a member and a berth is currently that of a member renting a limited number of berths. Another solution would be to view the reservation as a separate conceptual class in the same way you would model a "Sale" that is being "recorded" somewhere: for an example of this sale - recorded relationship, see Larman in Applying UML and Patterns 9.5:How to Find Conceptual Classes, Table 9.1, and Applying UML and Patterns 9.14:Associations, Table 9.2.

The Calendar class is possibly to be regarded as a report object, and therefore unnecessary (see Applying UML and Patterns 9.9:Guideline:Report Objects). On the other hand, and as Larman also argues in that same section, some times a report object is necessary to draw focus to the important parts of the use case, and a calendar might be an important item to show HOW the members interact with the information about the events, and therefore I would not necessarily remove it.

Over all the model is very clear and aids the understanding of the problem domain.
